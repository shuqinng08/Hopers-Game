/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, Config, ExecuteMsg, PartialConfig, InstantiateMsg, MyCurrentPositionResponse, QueryMsg, Timestamp, Uint64, StatusResponse, NextRound, LiveRound } from "./PricePrediction.types";
export interface PricePredictionReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  status: () => Promise<StatusResponse>;
  myCurrentPosition: ({
    address
  }: {
    address: string;
  }) => Promise<MyCurrentPositionResponse>;
  finishedRound: ({
    roundId
  }: {
    roundId: Uint128;
  }) => Promise<FinishedRoundResponse>;
}
export class PricePredictionQueryClient implements PricePredictionReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.status = this.status.bind(this);
    this.myCurrentPosition = this.myCurrentPosition.bind(this);
    this.finishedRound = this.finishedRound.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  status = async (): Promise<StatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      status: {}
    });
  };
  myCurrentPosition = async ({
    address
  }: {
    address: string;
  }): Promise<MyCurrentPositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      my_current_position: {
        address
      }
    });
  };
  finishedRound = async ({
    roundId
  }: {
    roundId: Uint128;
  }): Promise<FinishedRoundResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      finished_round: {
        round_id: roundId
      }
    });
  };
}
export interface PricePredictionInterface extends PricePredictionReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    config
  }: {
    config: PartialConfig;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  betBull: ({
    roundId
  }: {
    roundId: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  betBear: ({
    roundId
  }: {
    roundId: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  closeRound: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  collectWinnings: ({
    rounds
  }: {
    rounds: Uint128[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  fundStakers: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  hault: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  resume: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PricePredictionClient extends PricePredictionQueryClient implements PricePredictionInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.betBull = this.betBull.bind(this);
    this.betBear = this.betBear.bind(this);
    this.closeRound = this.closeRound.bind(this);
    this.collectWinnings = this.collectWinnings.bind(this);
    this.fundStakers = this.fundStakers.bind(this);
    this.hault = this.hault.bind(this);
    this.resume = this.resume.bind(this);
  }

  updateConfig = async ({
    config
  }: {
    config: PartialConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, funds);
  };
  betBull = async ({
    roundId
  }: {
    roundId: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      bet_bull: {
        round_id: roundId
      }
    }, fee, memo, funds);
  };
  betBear = async ({
    roundId
  }: {
    roundId: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      bet_bear: {
        round_id: roundId
      }
    }, fee, memo, funds);
  };
  closeRound = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      close_round: {}
    }, fee, memo, funds);
  };
  collectWinnings = async ({
    rounds
  }: {
    rounds: Uint128[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      collect_winnings: {
        rounds
      }
    }, fee, memo, funds);
  };
  fundStakers = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      fund_stakers: {}
    }, fee, memo, funds);
  };
  hault = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      hault: {}
    }, fee, memo, funds);
  };
  resume = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      resume: {}
    }, fee, memo, funds);
  };
}